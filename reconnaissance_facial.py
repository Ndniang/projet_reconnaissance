import streamlit as st
import cv2 # cv2 ( OpenCV) est une biblioth√®que puissante pour le traitement d'image et la vision par ordinateur
import numpy as np
from PIL import Image  # le module PIL (Python Imaging Library), qui est une biblioth√®que de traitement d‚Äôimage en Python
import tempfile  #qui permet de cr√©er des fichiers et dossiers temporaires en Python
import os  #qui sert √† interagir avec le syst√®me d‚Äôexploitation (Operating System).
#√áa permet de manipuler des fichiers, dossiers, chemins, variables d‚Äôenvironnement

#Ajoutez des instructions √† l‚Äôinterface de l‚Äôapplication Streamlit pour guider l‚Äôutilisateur sur la fa√ßon d‚Äôutiliser l‚Äôapplication.

st.markdown("""
Bienvenue dans l'application de d√©tection de visages ! üëã  
Voici comment l'utiliser :
1. T√©l√©chargez une image contenant des visages.
2. R√©glez les param√®tres `scaleFactor` et `minNeighbors` si n√©cessaire.
3. Choisissez la couleur du rectangle pour la d√©tection.
4. Cliquez sur **D√©tecter les visages** pour lancer l'analyse.
5. Enregistrez l'image d√©tect√©e si vous le souhaitez.
""")

#Ajoutez une fonctionnalit√© pour enregistrer les images avec les visages d√©tect√©s sur l'appareil de l'utilisateur
uploaded_file = st.file_uploader("T√©l√©chargez une image", type=["jpg", "jpeg", "png"])

#Ajoutez une fonctionnalit√© permettant √† l'utilisateur de choisir la couleur des rectangles dessin√©s autour des visages d√©tect√©s.
color = st.color_picker("Choisissez la couleur du rectangle", "#00FF00")

#Ajoutez une fonctionnalit√© pour ajuster le param√®tre minNeighbors dans la fonction face_cascade.detectMultiScale().
minNeighbors = st.slider("Ajustez le param√®tre minNeighbors", 1, 10, 5)

#Ajoutez une fonctionnalit√© pour ajuster le param√®tre scaleFactor dans la fonction face_cascade.detectMultiScale().
scaleFactor = st.slider("Ajustez le param√®tre scaleFactor", 1.01, 1.5, 1.1, step=0.01)
